// <auto-generated />
using System;
using Integratieproject1.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Integratieproject1.Migrations
{
    [DbContext(typeof(CityOfIdeasDbContext))]
    [Migration("20190329093056_CreateIdentitySchema")]
    partial class CreateIdentitySchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854");

            modelBuilder.Entity("Integratieproject1.Domain.Datatypes.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("HouseNr");

                    b.Property<string>("Street");

                    b.Property<string>("ZipCode");

                    b.HasKey("AddressId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Integratieproject1.Domain.Datatypes.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddressId");

                    b.Property<string>("LocationName");

                    b.Property<int?>("PositionPostionId");

                    b.HasKey("LocationId");

                    b.HasIndex("AddressId");

                    b.HasIndex("PositionPostionId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Integratieproject1.Domain.Datatypes.Position", b =>
                {
                    b.Property<int>("PostionId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Altitude");

                    b.Property<double>("Longitude");

                    b.HasKey("PostionId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Integratieproject1.Domain.Ideations.Idea", b =>
                {
                    b.Property<int>("IdeaId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IdeationId");

                    b.Property<string>("Image");

                    b.Property<int>("LoggedInUserUserId");

                    b.Property<int?>("PositionPostionId");

                    b.Property<string>("Text");

                    b.Property<string>("Theme");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<string>("Video");

                    b.HasKey("IdeaId");

                    b.HasIndex("IdeationId");

                    b.HasIndex("LoggedInUserUserId");

                    b.HasIndex("PositionPostionId");

                    b.ToTable("Ideas");
                });

            modelBuilder.Entity("Integratieproject1.Domain.Ideations.Ideation", b =>
                {
                    b.Property<int>("IdeationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CentralQuestion")
                        .IsRequired();

                    b.Property<bool>("InputIdeation");

                    b.Property<int?>("PhaseId");

                    b.HasKey("IdeationId");

                    b.HasIndex("PhaseId");

                    b.ToTable("Ideations");
                });

            modelBuilder.Entity("Integratieproject1.Domain.Ideations.Like", b =>
                {
                    b.Property<int>("LikeId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LoggedInUserUserId");

                    b.Property<int>("ReactionId");

                    b.HasKey("LikeId");

                    b.HasIndex("LoggedInUserUserId");

                    b.HasIndex("ReactionId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("Integratieproject1.Domain.Ideations.Reaction", b =>
                {
                    b.Property<int>("ReactionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("IdeaId");

                    b.Property<int?>("IdeationId");

                    b.Property<int>("LoggedInUserUserId");

                    b.Property<string>("ReactionText");

                    b.HasKey("ReactionId");

                    b.HasIndex("IdeaId");

                    b.HasIndex("IdeationId");

                    b.HasIndex("LoggedInUserUserId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("Integratieproject1.Domain.Ideations.Vote", b =>
                {
                    b.Property<int>("VoteId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Confirmed");

                    b.Property<int>("IdeaId");

                    b.Property<int?>("UserId");

                    b.Property<int>("VoteType");

                    b.HasKey("VoteId");

                    b.HasIndex("IdeaId");

                    b.HasIndex("UserId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("Integratieproject1.Domain.IoT.IoTSetup", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("IdeaId");

                    b.Property<int>("PositionPostionId");

                    b.Property<int?>("QuestionId");

                    b.HasKey("Code");

                    b.HasIndex("IdeaId");

                    b.HasIndex("PositionPostionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("IoTSetups");
                });

            modelBuilder.Entity("Integratieproject1.Domain.Projects.AdminProject", b =>
                {
                    b.Property<int>("AdminProjectId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AdminUserId");

                    b.Property<int>("ProjectId");

                    b.HasKey("AdminProjectId");

                    b.HasIndex("AdminUserId");

                    b.HasIndex("ProjectId");

                    b.ToTable("AdminProjects");
                });

            modelBuilder.Entity("Integratieproject1.Domain.Projects.Phase", b =>
                {
                    b.Property<int>("PhaseId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("PhaseName");

                    b.Property<int>("PhaseNr");

                    b.Property<int?>("ProjectId");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("PhaseId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Phases");
                });

            modelBuilder.Entity("Integratieproject1.Domain.Projects.Platform", b =>
                {
                    b.Property<int>("PlatformId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddressId");

                    b.Property<string>("Description");

                    b.Property<string>("Logo");

                    b.Property<string>("Phonenumber");

                    b.Property<string>("PlatformName")
                        .IsRequired();

                    b.HasKey("PlatformId");

                    b.HasIndex("AddressId");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("Integratieproject1.Domain.Projects.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("LocationId");

                    b.Property<string>("Logo");

                    b.Property<string>("Objective");

                    b.Property<int?>("PlatformId");

                    b.Property<string>("ProjectName")
                        .IsRequired();

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Status");

                    b.HasKey("ProjectId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PlatformId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Integratieproject1.Domain.Surveys.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AnswerText");

                    b.Property<int>("QuestionId");

                    b.Property<int>("TotalTimesChosen");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Integratieproject1.Domain.Surveys.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("QuestionNr");

                    b.Property<string>("QuestionText");

                    b.Property<int>("QuestionType");

                    b.Property<int>("SurveyId");

                    b.HasKey("QuestionId");

                    b.HasIndex("SurveyId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Integratieproject1.Domain.Surveys.Survey", b =>
                {
                    b.Property<int>("SurveyId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PhaseId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("SurveyId");

                    b.HasIndex("PhaseId");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("Integratieproject1.Domain.Users.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<int>("PlatformId");

                    b.HasKey("UserId");

                    b.HasIndex("PlatformId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Integratieproject1.Domain.Users.LoggedInUser", b =>
                {
                    b.HasBaseType("Integratieproject1.Domain.Users.User");

                    b.Property<string>("Password");

                    b.Property<int>("RoleType");

                    b.Property<bool>("Verified");

                    b.Property<string>("ZipCode");

                    b.HasDiscriminator().HasValue("LoggedInUser");
                });

            modelBuilder.Entity("Integratieproject1.Domain.Users.Organisation", b =>
                {
                    b.HasBaseType("Integratieproject1.Domain.Users.LoggedInUser");

                    b.Property<string>("OrganisationName");

                    b.Property<string>("TaxNumber");

                    b.HasDiscriminator().HasValue("Organisation");
                });

            modelBuilder.Entity("Integratieproject1.Domain.Users.Person", b =>
                {
                    b.HasBaseType("Integratieproject1.Domain.Users.LoggedInUser");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<int>("Sex");

                    b.HasDiscriminator().HasValue("Person");
                });

            modelBuilder.Entity("Integratieproject1.Domain.Datatypes.Location", b =>
                {
                    b.HasOne("Integratieproject1.Domain.Datatypes.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Integratieproject1.Domain.Datatypes.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionPostionId");
                });

            modelBuilder.Entity("Integratieproject1.Domain.Ideations.Idea", b =>
                {
                    b.HasOne("Integratieproject1.Domain.Ideations.Ideation", "Ideation")
                        .WithMany("Ideas")
                        .HasForeignKey("IdeationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Integratieproject1.Domain.Users.LoggedInUser", "LoggedInUser")
                        .WithMany("Ideas")
                        .HasForeignKey("LoggedInUserUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Integratieproject1.Domain.Datatypes.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionPostionId");
                });

            modelBuilder.Entity("Integratieproject1.Domain.Ideations.Ideation", b =>
                {
                    b.HasOne("Integratieproject1.Domain.Projects.Phase", "Phase")
                        .WithMany("Ideations")
                        .HasForeignKey("PhaseId");
                });

            modelBuilder.Entity("Integratieproject1.Domain.Ideations.Like", b =>
                {
                    b.HasOne("Integratieproject1.Domain.Users.LoggedInUser", "LoggedInUser")
                        .WithMany()
                        .HasForeignKey("LoggedInUserUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Integratieproject1.Domain.Ideations.Reaction", "Reaction")
                        .WithMany("Likes")
                        .HasForeignKey("ReactionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Integratieproject1.Domain.Ideations.Reaction", b =>
                {
                    b.HasOne("Integratieproject1.Domain.Ideations.Idea", "Idea")
                        .WithMany("Reactions")
                        .HasForeignKey("IdeaId");

                    b.HasOne("Integratieproject1.Domain.Ideations.Ideation", "Ideation")
                        .WithMany("Reactions")
                        .HasForeignKey("IdeationId");

                    b.HasOne("Integratieproject1.Domain.Users.LoggedInUser", "LoggedInUser")
                        .WithMany("Reactions")
                        .HasForeignKey("LoggedInUserUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Integratieproject1.Domain.Ideations.Vote", b =>
                {
                    b.HasOne("Integratieproject1.Domain.Ideations.Idea", "Idea")
                        .WithMany("Votes")
                        .HasForeignKey("IdeaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Integratieproject1.Domain.Users.User", "User")
                        .WithMany("Votes")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Integratieproject1.Domain.IoT.IoTSetup", b =>
                {
                    b.HasOne("Integratieproject1.Domain.Ideations.Idea", "Idea")
                        .WithMany("IoTSetups")
                        .HasForeignKey("IdeaId");

                    b.HasOne("Integratieproject1.Domain.Datatypes.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionPostionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Integratieproject1.Domain.Surveys.Question", "Question")
                        .WithMany("IoTSetups")
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("Integratieproject1.Domain.Projects.AdminProject", b =>
                {
                    b.HasOne("Integratieproject1.Domain.Users.LoggedInUser", "Admin")
                        .WithMany("AdminProjects")
                        .HasForeignKey("AdminUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Integratieproject1.Domain.Projects.Project", "Project")
                        .WithMany("AdminProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Integratieproject1.Domain.Projects.Phase", b =>
                {
                    b.HasOne("Integratieproject1.Domain.Projects.Project", "Project")
                        .WithMany("Phases")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("Integratieproject1.Domain.Projects.Platform", b =>
                {
                    b.HasOne("Integratieproject1.Domain.Datatypes.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");
                });

            modelBuilder.Entity("Integratieproject1.Domain.Projects.Project", b =>
                {
                    b.HasOne("Integratieproject1.Domain.Datatypes.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Integratieproject1.Domain.Projects.Platform", "Platform")
                        .WithMany("Projects")
                        .HasForeignKey("PlatformId");
                });

            modelBuilder.Entity("Integratieproject1.Domain.Surveys.Answer", b =>
                {
                    b.HasOne("Integratieproject1.Domain.Surveys.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Integratieproject1.Domain.Surveys.Question", b =>
                {
                    b.HasOne("Integratieproject1.Domain.Surveys.Survey", "Survey")
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Integratieproject1.Domain.Surveys.Survey", b =>
                {
                    b.HasOne("Integratieproject1.Domain.Projects.Phase", "Phase")
                        .WithMany("Surveys")
                        .HasForeignKey("PhaseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Integratieproject1.Domain.Users.User", b =>
                {
                    b.HasOne("Integratieproject1.Domain.Projects.Platform", "Platform")
                        .WithMany("Users")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
